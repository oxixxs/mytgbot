import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = '8286575871:AAFK32MDZJsGetWk5YO7ad-CiF9voCLBBzs'  # –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
OWNER_ID = 7459210893  # üîí –í—Å—Ç–∞–≤—å –°–í–û–ô Telegram user ID (–Ω–µ username!)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

participants = set()

join_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üéâ –ë–µ—Ä—É —É—á–∞—Å—Ç—å", callback_data="join")]
    ]
)

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:",
        reply_markup=join_button
    )

@dp.message(F.text == "/list")
async def cmd_list(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É.")
        return

    if participants:
        text = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n" + "\n".join(participants)
    else:
        text = "–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—ñ."
    await message.answer(text)

@dp.callback_query(F.data == "join")
async def process_join(callback: types.CallbackQuery):
    user = callback.from_user
    user_info = f"{user.full_name} (@{user.username})"
    if user_info not in participants:
        participants.add(user_info)
        await callback.answer("–¢–∏ –±–µ—Ä–µ—à —É—á–∞—Å—Ç—å üéâ")
        await callback.message.answer(f"{user_info} –¥–æ–ª—É—á–∏–≤—Å—è!")
    else:
        await callback.answer("–¢–∏ –≤–∂–µ –±–µ—Ä–µ—à —É—á–∞—Å—Ç—å üòâ")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())